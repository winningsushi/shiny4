shiny::runApp()
shiny::runApp()
runApp()
runApp()
# new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
# if (length(new.pkg))
#   install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
pkg = c('shiny', 'DT', 'quadprog', 'highcharter', 'quantmod', 'PerformanceAnalytics',
'shinythemes', 'knitr', 'kableExtra', 'magrittr', 'shinyWidgets',
'lubridate', 'stringr','ggplot2', 'dplyr', 'tidyr', 'plotly', 'tibble', "kableExtra", "shinyWidgets" ,"highcharter")
# new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
# if (length(new.pkg))
#   install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
install.packages('highcharter')
runApp()
pkg = c('shiny', 'DT', 'quadprog', 'highcharter', 'quantmod', 'PerformanceAnalytics',
'shinythemes', 'knitr', 'kableExtra', 'magrittr', 'shinyWidgets',
'lubridate', 'stringr','ggplot2', 'dplyr', 'tidyr', 'plotly', 'tibble', "kableExtra", "shinyWidgets" ,"highcharter")
# new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
# if (length(new.pkg))
#   install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
pkg = c('shiny', 'DT', 'quadprog', 'highcharter', 'quantmod', 'PerformanceAnalytics',
'shinythemes', 'knitr', 'kableExtra', 'magrittr', 'shinyWidgets',
'lubridate', 'stringr','ggplot2', 'dplyr', 'tidyr', 'plotly','DT', 'tibble', "kableExtra", "shinyWidgets" ,"highcharter")
# new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
# if (length(new.pkg))
#   install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
pkg = c('shiny', 'DT', 'quadprog', 'highcharter', 'quantmod', 'PerformanceAnalytics',
'shinythemes', 'knitr', 'kableExtra', 'magrittr', 'shinyWidgets',
'lubridate', 'stringr','ggplot2', 'dplyr', 'tidyr', 'plotly','DT', 'tibble', "kableExtra", "shinyWidgets" ,"highcharter")
# new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
# if (length(new.pkg))
#   install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
shiny::runApp()
runApp()
install.packages('DT')
runApp()
runApp()
sidebarPanel(
fileInput('dataset', "업로드", multiple = FALSE, accept = NULL, width = NULL),
actionButton("goButton", "Go!", class = "btn-success")
)
runApp()
runApp()
install.packages('kableExtra')
runApp()
runApp()
install.packages('shinyWidgets')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('K:/project/shiny4/frontier.R', encoding = 'UTF-8')
source('K:/project/shiny4/frontier.R', encoding = 'UTF-8')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(quantmod)
source('K:/project/henry.R', encoding = 'UTF-8')
source('K:/project/henry.R', encoding = 'UTF-8')
library(quantmod)
library(PerformanceAnalytics)
library(magrittr)
library(ggplot2)
library(plotly)
# #csvinput start
etfdb <- read.csv("K:/project/etfdb.csv", header = TRUE, sep = ',',fileEncoding="UTF-8-BOM")
etfdb
rets <- read.zoo("K:/project/yellowmark.csv", header = TRUE, sep = ',',encoding="UTF-8")
rets <- na.omit(as.xts(rets))
start_day <- index(rets)[1]
end_day <- index(rets)[length(index(rets))]
period <- paste0(start_day,"::", end_day)
Rfdata <- read.zoo("K:/project/rf_data.csv", header = TRUE, sep = ',',encoding="UTF-8")
Rfdata <- na.omit(as.xts(Rfdata))
Rfdata <- Rfdata[period]
Rf= Return.annualized(Rfdata, geometric = FALSE) %>% c()
names = colnames(rets)
names(rets) = names #컬럼명을 심볼에서 이름으로 변경
covs = cov(rets) * 252 # 공분산 연율화
charts.PerformanceSummary(rets, main = '누적수익률')
yearly_mean = Return.annualized(rets, geometric = FALSE) %>% c()
yearly_mean
yearly_vol = StdDev.annualized(rets) %>% c()
yearly_vol
yearly_stat = cbind(yearly_mean, yearly_vol) %>%
data.frame()
yearly_stat %>%
ggplot(aes(x = yearly_vol, y = yearly_mean, label = names, color = names)) +
geom_point(shape = 18) +
scale_x_continuous(expand = c(0.02, 0.02)) +
scale_y_continuous(expand = c(0.02, 0.02)) +
geom_text(size = 3, vjust = -0.7) +
theme(legend.position = 'none') +
xlab('Volatility') +
ylab('Return')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
mainPanel(
tabsetPanel(
tabPanel("RawData", br(),
dataTableOutput("table")
),
tabPanel("누적 수익률",br(),
plotOutput("perfPlot")
),
tabPanel("공분산",br(),
dataTableOutput("covs")
),
tabPanel("종목별 위험 수익",br(),
plotOutput("yearly_stat")
),
tabPanel("효율적 프론티어", br(),
dataTableOutput("target_minvol"),
dataTableOutput("target_maxsharpe")
)
)
)
runApp()
wt = runif(numAssets, min=0, max=1)
runApp()
runApp()
runApp()
runApp()
rsconnect::setAccountInfo(name='vf92ti-0-0', token='992D11FD329887ACAD9D8ABC3FD80B86', secret='l0kFKIRcg0jj0dXcPBJO0kPnFVOskSZ+YYzqz8J2')
library(rsconnect)
rsconnect::deployApp()
rsconnect::setAccountInfo(name='vf92ti-0-0', token='992D11FD329887ACAD9D8ABC3FD80B86', secret='l0kFKIRcg0jj0dXcPBJO0kPnFVOskSZ+YYzqz8J2')
rsconnect::deployApp()
rsconnect::setAccountInfo(name='vf92ti-0-0', token='992D11FD329887ACAD9D8ABC3FD80B86', secret='l0kFKIRcg0jj0dXcPBJO0kPnFVOskSZ+YYzqz8J2')
rsconnect::deployApp()
runApp()
rsconnect::appDependencies()
rsconnect::deployApp()
rsconnect::deployApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(magrittr)
source('K:/quant_cookbook-master/follow.R', encoding = 'UTF-8')
KOR_ticker = read.csv('data/KOR_ticker.csv', row.names = 1)
KOR_ticker = read.csv('./data/KOR_ticker.csv', row.names = 1)
KOR_ticker = read.csv('/data/KOR_ticker.csv', row.names = 1)
KOR_ticker = read.csv('data/KOR_ticker.csv', row.names = 1)
KOR_ticker = read.csv('/data/KOR_ticker.csv', row.names = 1)
KOR_ticker = read.csv('K:/data/KOR_ticker.csv', row.names = 1)
KOR_ticker = read.csv('K:/quant_cookbook-master/data/KOR_ticker.csv', row.names = 1)
KOR_ticker = read.csv('K:/quant_cookbook-master/data/KOR_ticker.csv', row.names = 1)
KOR_ticker$'종목코드' =
str_pad(KOR_ticker$'종목코드', 6, side = c('left'), pad = '0')
price_list = list()
#실습 파일
library(stringr)
library(xts)
library(magrittr)
KOR_ticker = read.csv('K:/quant_cookbook-master/data/KOR_ticker.csv', row.names = 1)
KOR_ticker = read.csv('K:/quant_cookbook-master/data/KOR_ticker.csv')
KOR_ticker = read.csv('K:/quant_cookbook-master/data/KOR_ticker.csv', row.names = 1)
KOR_ticker = read.csv('K:/quant_cookbook-master/data/KOR_ticker.csv')
KOR_ticker = read.csv('K:/quant_cookbook-master/data/KOR_ticker.csv',encoding="UTF-8", row.names = 1)
KOR_ticker = read.csv('K:/quant_cookbook-master/data/KOR_ticker.csv',encoding="UTF-8-BOM", row.names = 1)
KOR_ticker = read.csv('K:/quant_cookbook-master/data/KOR_ticker.csv',fileEncoding="UTF-8-BOM", row.names = 1)
View(KOR_ticker)
KOR_ticker$'종목코드' =
str_pad(KOR_ticker$'종목코드', 6, side = c('left'), pad = '0')
View(KOR_ticker)
# #csvinput start
etfdb <- read.csv("K:/project/etfdb.csv", header = TRUE, sep = ',',fileEncoding="UTF-8-BOM")
etfdb
rets <- read.zoo("K:/project/yellowmark.csv", header = TRUE, sep = ',',encoding="UTF-8")
rets <- na.omit(as.xts(rets))
start_day <- index(rets)[1]
end_day <- index(rets)[length(index(rets))]
period <- paste0(start_day,"::", end_day)
Rfdata <- read.zoo("K:/project/rf_data.csv", header = TRUE, sep = ',',encoding="UTF-8")
Rfdata <- na.omit(as.xts(Rfdata))
Rfdata <- Rfdata[period]
Rf= Return.annualized(Rfdata, geometric = FALSE) %>% c()
names = colnames(rets)
library(quantmod)
library(PerformanceAnalytics)
library(magrittr)
library(ggplot2)
library(plotly)
# #csvinput start
etfdb <- read.csv("K:/project/etfdb.csv", header = TRUE, sep = ',',fileEncoding="UTF-8-BOM")
etfdb
rets <- read.zoo("K:/project/yellowmark.csv", header = TRUE, sep = ',',encoding="UTF-8")
rets <- na.omit(as.xts(rets))
start_day <- index(rets)[1]
end_day <- index(rets)[length(index(rets))]
period <- paste0(start_day,"::", end_day)
Rfdata <- read.zoo("K:/project/rf_data.csv", header = TRUE, sep = ',',encoding="UTF-8")
Rfdata <- na.omit(as.xts(Rfdata))
Rfdata <- Rfdata[period]
Rf= Return.annualized(Rfdata, geometric = FALSE) %>% c()
names = colnames(rets)
names(rets) = names #컬럼명을 심볼에서 이름으로 변경
covs = cov(rets) * 252 # 공분산 연율화
charts.PerformanceSummary(rets, main = '누적수익률')
yearly_mean = Return.annualized(rets, geometric = FALSE) %>% c()
yearly_mean
yearly_vol = StdDev.annualized(rets) %>% c()
yearly_vol
yearly_stat = cbind(yearly_mean, yearly_vol) %>%
data.frame()
yearly_stat %>%
ggplot(aes(x = yearly_vol, y = yearly_mean, label = names, color = names)) +
geom_point(shape = 18) +
scale_x_continuous(expand = c(0.02, 0.02)) +
scale_y_continuous(expand = c(0.02, 0.02)) +
geom_text(size = 3, vjust = -0.7) +
theme(legend.position = 'none') +
xlab('Volatility') +
ylab('Return')
# Simulation
numAssets = length(names)
numPortfolio = 10000
sim = list()
for (i in 1 : numPortfolio) {
wt = runif(numAssets, min=0, max=1)
wt = wt / sum(wt)
expected_return = wt %*% yearly_mean
expected_vol = (t(wt) %*% covs %*% wt) %>% sqrt()
expected_sharpe = (expected_return-Rf) / expected_vol
risk_freerate = Rf
sim[[i]] = c(wt, expected_return, expected_vol, expected_sharpe, risk_freerate)
}
sim = do.call(rbind, sim) %>% data.frame()
colnames(sim) = c(names, 'Return', 'Volatility', 'Sharpe', 'Rf')
target_minvol = sim[which.min(sim$Volatility), ]
target_maxsharpe = sim[which.max(sim$Sharpe), ]
target_maxsharpe
# plot simulation
p = sim %>%
ggplot(aes(x = `Volatility`, y = `Return`, color = `Sharpe`)) +
geom_point() +
scale_color_gradient(low = 'Blue', high = 'Orange') +
theme_classic()
ggplotly(p)
# plot min vol and max sharpe
p2 = p +
geom_point(data = target_minvol,
aes(x = Volatility, y = Return),
col = 'black', shape = 18, size = 3) +
geom_point(data = target_maxsharpe,
aes(x = Volatility, y = Return),
col = 'black', shape = 18, size = 3) +
annotate('text',
x = target_minvol$Volatility + 0.03,
y = target_minvol$Return,
label='Min Vol',
fontface=2) +
annotate('text',
x = target_maxsharpe$Volatility + 0.03,
y = target_maxsharpe$Return,
label='Max Sharpe',
fontface=2) +
geom_point(data = yearly_stat,
aes(x = yearly_vol, y = yearly_mean),
color = 'black', shape = 4, size = 3)
ggplotly(p2)
p3=p2 +
geom_abline(intercept = Rf,
slope = target_maxsharpe$Sharpe,
size = 1) +
expand_limits(x=0) +
expand_limits(y=0)
ggplotly(p3)
shiny::runApp()
runApp()
source('K:/project/shiny4/mainPanel.R', encoding = 'UTF-8')
return(list(covs = covs,
yearly_stat = yearly_stat,
target_minvol = target_minvol,
target_maxsharpe = target_maxsharpe,
p2 = p2
))
KOR_ticker$'종목코드' =
str_pad(KOR_ticker$'종목코드', 6, side = c('left'), pad = '0')
price_list = list()
runApp()
runApp()
runApp()
runApp()
runApp()
View(target_minvol)
target_minvol <- sim[which.min(sim$Volatility), ]
runApp()
runApp()
runApp()
runApp()
runApp()
output$p = renderPlot(
frontier()$p
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#
# # plot min vol and max sharpe
p2 = p +
geom_point(data = data.frame(target_minvol),
aes(x = Volatility, y = Return),
col = 'black', shape = 18, size = 3) +
geom_point(data =  data.frame(target_maxsharpe),
aes(x = Volatility, y = Return),
col = 'black', shape = 18, size = 3) +
annotate('text',
x = target_minvol$Volatility + 0.03,
y = target_minvol$Return,
label='Min Vol',
fontface=2) +
annotate('text',
x = target_maxsharpe$Volatility + 0.03,
y = target_maxsharpe$Return,
label='Max Sharpe',
fontface=2) +
geom_point(data = data.frame(yearly_stat),
aes(x = yearly_vol, y = yearly_mean),
color = 'black', shape = 4, size = 3)
runApp()
runApp()
runApp()
#실습 파일
library(stringr)
library(xts)
library(magrittr)
KOR_ticker = read.csv('K:/quant_cookbook-master/data/KOR_ticker.csv',fileEncoding="UTF-8-BOM", row.names = 1)
KOR_ticker$'종목코드' =
str_pad(KOR_ticker$'종목코드', 6, side = c('left'), pad = '0')
price_list = list()
View(KOR_ticker)
for (i in 1 : nrow(KOR_ticker)) {
name = KOR_ticker[i, '종목코드']
price_list[[i]] =
read.csv(paste0('data/KOR_price/', name,
'_price.csv'),row.names = 1) %>%
as.xts()
}
for (i in 1 : nrow(KOR_ticker)) {
name = KOR_ticker[i, '종목코드']
price_list[[i]] =
read.csv(paste0('K:/quant_cookbook-master/data/KOR_price/', name,
'_price.csv'),row.names = 1) %>%
as.xts()
}
price_list[[i]] =
read.csv(paste0('K:/quant_cookbook-master/data/KOR_price/',fileEncoding="UTF-8-BOM", name,
'_price.csv'),row.names = 1) %>%
as.xts()
