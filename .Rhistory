rets <- na.omit(as.xts(rets))
start_day <- index(rets)[1]
end_day <- index(rets)[length(index(rets))]
period <- paste0(start_day,"::", end_day)
#날짜 옵션을 선택할 경우
if (input$dateoption == "custom"){
period2 <- paste0(input$startdate,"::", input$enddate)
rets<- rets[period2]
}
return(rets)
})
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
if (is.null(infile)) {
print("파일이 비어있다")
return(rets)
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
submit1
runApp()
runApp()
runApp()
runApp()
runApp()
submit1
submit1
runApp()
runApp()
filedata11 <- eventReactive(input$submit1, {
print("시작")
infile <- input$dataset
if (is.null(infile)) {
print("파일이 비어있다")
return(rets)
}
rets <- read.zoo(infile$datapath, header = TRUE, sep = ',',fileEncoding="UTF-8-BOM")
rets <- na.omit(as.xts(rets))
start_day <- index(rets)[1]
end_day <- index(rets)[length(index(rets))]
period <- paste0(start_day,"::", end_day)
#날짜 옵션을 선택할 경우
if (input$dateoption == "custom"){
period2 <- paste0(input$startdate,"::", input$enddate)
rets<- rets[period2]
}
return(rets)
})
runApp()
runApp()
runApp()
runApp()
runApp()
filedata11 <- reactive({
print("시작")
infile <- input$dataset
if (is.null(infile)) {
print("파일이 비어있다")
return()
}
rets <- read.zoo(infile$datapath, header = TRUE, sep = ',',fileEncoding="UTF-8-BOM")
rets <- na.omit(as.xts(rets))
start_day <- index(rets)[1]
end_day <- index(rets)[length(index(rets))]
period <- paste0(start_day,"::", end_day)
#날짜 옵션을 선택할 경우
if (input$dateoption == "custom"){
period2 <- paste0(input$startdate,"::", input$enddate)
rets<- rets[period2]
}
return(rets)
})
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dataTableOutput("corr"),
dataTableOutput("corr"),
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
mainPanel(
tabsetPanel(
tabPanel("대체투자 자산정보", br(),
includeHTML('investuniver.html')
# includeMarkdown('investuniver.rmd')
),
tabPanel("RawData", br(),
textOutput("period"),
dataTableOutput("table")
),
tabPanel("누적 수익률",br(),
plotOutput("perfPlot")
),
tabPanel("공분산",br(),
dataTableOutput("covs")
),
tabPanel("상관관계 히트맵",br(),
plotOutput("corr_plot")
),
tabPanel("상관관계 테이블 ",br(),
dataTableOutput("corr")
),
tabPanel("종목별 위험 수익",br(),
plotOutput("yearly_stat")
),
tabPanel("효율적 프론티어", br(),
tableOutput("target_minvol"),
tableOutput("target_maxsharpe"),
plotOutput("p3"),
plotOutput("p2")
),
tabPanel("포트폴리오 백테스트", br(),
textInput("weight", "비중", placeholder ="0.5,0.5"),
textOutput("annual_return"),
textOutput("annual_std"),
plotOutput("backtestPlot")
),
tabPanel("Fama-French 3 Factor 분석", br(),
textOutput("annual_return"),
textOutput("annual_std"),
plotOutput("backtestPlot")
)
)
)
runApp()
renderDT
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp('E:/project/shiny4-main')
runApp('E:/project/shiny5')
runApp()
runApp()
runApp()
print(colnames(rets))
runApp()
source('famafrench.R',encoding="utf-8", local = TRUE)$value # 3요인
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ffdata <- read.zoo("F-F_Research_Data_Factors_daily.csv", header = TRUE, sep = ',',encoding="UTF-8")
head(data)
ffdata <- read.zoo("F-F_Research_Data_Factors_daily.csv", header = TRUE, sep = ',',encoding="UTF-8")
head(data)
ffdata <- read.zoo("F-F_Research_Data_Factors_daily.csv", header = TRUE, sep = ',',encoding="UTF-8")
ffdata <- read.zoo("F-F_Research_Data_Factors_daily.csv", header = TRUE, sep = ',',encoding="UTF-8")
ffdata <- read.zoo("F-F_Research_Data_Factors_daily.csv", header = TRUE, sep = ',',encoding="UTF-8")
head(data)
ffdata <- read.zoo("F-F_Research_Data_Factors_daily.csv", header = TRUE, sep = ',',encoding="UTF-8")
head(data)
ffdata <- read.zoo("ff.csv", header = TRUE, sep = ',',encoding="UTF-8")
head(data)
runApp()
runApp()
ffdata <- read.zoo("ff.csv", header = TRUE, index.column = 1:2, sep = ',',encoding="UTF-8")
head(data)
return(list(
kkk = 'chart'
))
ffdata <- read.zoo("ff.csv", header = TRUE, index.column = 1:2, sep = ',',encoding="UTF-8")
ffdata <- read.zoo("ff.csv", header = TRUE, sep = ',',encoding="UTF-8")
head(data)
ffdata <- read.zoo("ff.csv", header = TRUE, sep = ',',encoding="UTF-8")
head(data)
Rfdata <- read.zoo("rf_data.csv", header = TRUE, sep = ',',encoding="UTF-8")
ffdata <- read.zoo("ff.csv", header = TRUE, sep = ',',encoding="UTF-8")
ffdata <- read.csv("ff.csv", header = TRUE, sep = ',',encoding="UTF-8")
View(ffdata)
merged <- merge(rets, ffdata) %>% na.omit()
runApp()
ffdata <- read.zoo("ff.csv", header = TRUE, index = 1, sep = ',',encoding="UTF-8")
ffdata <- read.zoo("ff.csv", header = TRUE, index = 1, sep = ',',encoding="UTF-8",format = '%Y.%m.%d')
FFF <- read.zoo("ff.csv",
header = TRUE,
sep = ',',
index = 1,
tz ='',
format = '%Y.%m.%d')
ffdata <- read.csv("ff.csv", header = TRUE, sep = ',', index = 1, encoding="UTF-8")
ff <- as.xts(ffdata)
ffdata <- read.csv("ff.csv", header = TRUE, sep = ',', index = 1, encoding="UTF-8")
ffdata <- read.csv("ff.csv", header = TRUE, sep = ',',  encoding="UTF-8")
ff <- as.xts(ffdata)
ffdata <- read.csv.zoo("ff.csv", header = TRUE, sep = ',',  encoding="UTF-8")
ffdata <- read.zoo("ff.csv", header = TRUE, tz ='',  sep = ',',  encoding="UTF-8")
ffdata <- read.zoo("ff.csv", header = TRUE,  sep = ',',  encoding="UTF-8")
ffdata <- read.zoo("ff.csv",tz = "UTC", format = "%Y/%m/%d", header = TRUE,  sep = ',',  encoding="UTF-8")
ffdata <- read.zoo("ff.csv",tz = "UTC", format = "%Y-%m-%d", header = TRUE,  sep = ',',  encoding="UTF-8")
ffdata <- read.zoo("ff.csv",tz = "UTC", format = "%Y/%m/%d", header = TRUE,  sep = ',',  encoding="UTF-8")
ffdata <- read.zoo("ff.csv",tz = "",index =1, format = "%Y/%m/%d", header = TRUE,  sep = ',',  encoding="UTF-8")
ffdata <- read.zoo("ff.csv",tz = "",index =1, format = "%Y-%m-%d", header = TRUE,  sep = ',',  encoding="UTF-8")
View(ffdata)
factors_data_address <-
"http://mba.tuck.dartmouth.edu/pages/faculty/ken.french/ftp/Global_5_Factors_Daily_CSV.zip"
factors_csv_name <- "Global_5_Factors_Daily.csv"
temp <- tempfile()
download.file(
# location of file to be downloaded
factors_data_address,
# where we want R to store that file
temp,
quiet = TRUE)
Global_5_Factors <-
read_csv(unz(temp, factors_csv_name), skip = 6 ) %>%
rename(date = X1, MKT = `Mkt-RF`) %>%
mutate(date = ymd(parse_date_time(date, "%Y%m%d")))%>%
mutate_if(is.numeric, funs(. / 100)) %>%
select(-RF)
Global_5_Factors <-
read_csv(unz(temp, factors_csv_name), skip = 6 ) %>%
rename(date = X1, MKT = `Mkt-RF`) %>%
mutate(date = ymd(parse_date_time(date, "%Y%m%d")))%>%
mutate_if(is.numeric, funs(. / 100)) %>%
select(-RF)
factors_data_address <-
"http://mba.tuck.dartmouth.edu/pages/faculty/ken.french/ftp/Global_5_Factors_Daily_CSV.zip"
factors_csv_name <- "Global_5_Factors_Daily.csv"
temp <- tempfile()
download.file(
# location of file to be downloaded
factors_data_address,
# where we want R to store that file
temp,
quiet = TRUE)
download.file(
# location of file to be downloaded
factors_data_address,
# where we want R to store that file
temp,
quiet = TRUE)
download.file(
# location of file to be downloaded
factors_data_address,
# where we want R to store that file
temp,
quiet = TRUE)
Global_5_Factors <-
read_csv(unz(temp, factors_csv_name), skip = 6 ) %>%
rename(date = X1, MKT = `Mkt-RF`) %>%
mutate(date = ymd(parse_date_time(date, "%Y%m%d")))%>%
mutate_if(is.numeric, funs(. / 100)) %>%
select(-RF)
library(tidyverse)
library(broom)
library(tidyquant)
library(timetk)
factors_data_address <-
"http://mba.tuck.dartmouth.edu/pages/faculty/ken.french/ftp/Global_5_Factors_Daily_CSV.zip"
factors_csv_name <- "Global_5_Factors_Daily.csv"
temp <- tempfile()
download.file(
# location of file to be downloaded
factors_data_address,
# where we want R to store that file
temp,
quiet = TRUE)
Global_5_Factors <-
read_csv(unz(temp, factors_csv_name), skip = 6 ) %>%
rename(date = X1, MKT = `Mkt-RF`) %>%
mutate(date = ymd(parse_date_time(date, "%Y%m%d")))%>%
mutate_if(is.numeric, funs(. / 100)) %>%
select(-RF)
View(Global_5_Factors)
View(Global_5_Factors)
factors_data_address <-
"http://mba.tuck.dartmouth.edu/pages/faculty/ken.french/ftp/F-F_Research_Data_5_Factors_2x3_daily_CSV.zip"
factors_csv_name <- "Global_5_Factors_Daily.csv"
temp <- tempfile()
download.file(
# location of file to be downloaded
factors_data_address,
# where we want R to store that file
temp,
quiet = TRUE)
Global_5_Factors <-
read_csv(unz(temp, factors_csv_name), skip = 6 ) %>%
rename(date = X1, MKT = `Mkt-RF`) %>%
mutate(date = ymd(parse_date_time(date, "%Y%m%d")))%>%
mutate_if(is.numeric, funs(. / 100)) %>%
select(-RF)
symbols <- colnames("KO", "AAPL")
symbols <- colnames("KO", "AAPL")
ffdata <- read.csv("ff.csv", header = TRUE, sep = ',',  encoding="UTF-8")
ff <- as.xts(ffdata)
View(ffdata)
ffdata <- read.zoo("ff.csv", header = TRUE, sep = ',',  encoding="UTF-8")
ffdata <- read.csv("ff.csv", header = TRUE, sep = ',',  encoding="UTF-8")
na.fill(ffdata,NA)
x<- zoo(ffdata)
ffdata <- read.zoo("ff.csv", header = TRUE, sep = ',',  encoding="UTF-8")
ffdata <- read.zoo("ff.csv", header = TRUE, sep = ',',  encoding="UTF-8")
ff <- as.xts(ffdata)
View(ff)
View(ff)
symbols = c("AAPL", "O")
getSymbols(symbols, src='yahoo')
View(AAPL)
prices = do.call(cbind, lapply(symbols, function(x) Cl(get(x)))) %>% setNames(symbols)
rets = Return.calculate(prices) %>% na.omit()
View(rets)
View(rets)
print('RRRRRRRRR')
ffdata <- read.zoo("ff.csv", header = TRUE, sep = ',',  encoding="UTF-8")
ff <- as.xts(ffdata)
merged <- merge(rets, ff) %>% na.omit()
View(merged)
View(merged)
result = lm( (AAPL-RF) ~ Mkt.RF + SMB + HML + MOM, data = merged)
result = lm((AAPL-RF) ~ Mkt.RF + SMB + HML, data = merged)
summary(result)
rr = summary(result)
View(rr)
View(rr)
View(rr)
broom::tidy(result)
library(stargazer)
result = lm((AAPL-RF) ~ Mkt.RF + SMB + HML, data = merged)
broom::tidy(result)
shiny::runApp()
runApp()
runApp()
# symbols <- input$weight
symbols <- 'AAPL'
print(symbols)
getSymbols(symbols, src='yahoo')
prices = do.call(cbind, lapply(symbols, function(x) Cl(get(x)))) %>% setNames(symbols)
rets = Return.calculate(prices) %>% na.omit()
ffdata <- read.zoo("ff.csv", header = TRUE, sep = ',',  encoding="UTF-8")
ff <- as.xts(ffdata)
merged <- merge(rets, ff) %>% na.omit()
View(merged)
result = lm((symbols-RF) ~ Mkt.RF + SMB + HML, data = merged)
result = lm((symbols-RF) ~ Mkt.RF + SMB + HML, data = merged)
result = lm((AAPL-RF) ~ Mkt.RF + SMB + HML, data = merged)
View(merged)
merged[symbols]
merged[symbols]
merged$symbols
merged$symbols
# symbols <- input$weight
symbols <- 'AAPL'
print(symbols)
getSymbols(symbols, src='yahoo')
prices = do.call(cbind, lapply(symbols, function(x) Cl(get(x)))) %>% setNames('stock')
rets = Return.calculate(prices) %>% na.omit()
ffdata <- read.zoo("ff.csv", header = TRUE, sep = ',',  encoding="UTF-8")
ff <- as.xts(ffdata)
merged <- merge(rets, ff) %>% na.omit()
View(merged)
result = lm((stock-RF) ~ Mkt.RF + SMB + HML, data = merged)
broom::tidy(result)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# symbols <- 'AAPL'
print(symbols)
getSymbols(symbols, src='yahoo')
runApp()
symbols <- 'AAPL'
print(symbols)
getSymbols(symbols, src='yahoo')
prices = do.call(cbind, lapply(symbols, function(x) Cl(get(x)))) %>% setNames('Asset')
rets = Return.calculate(prices) %>% na.omit()
ffdata <- read.zoo("ff.csv", header = TRUE, sep = ',',  encoding="UTF-8")
ff <- as.xts(ffdata)
merged <- merge(rets, ff) %>% na.omit()
result = lm((Asset-RF) ~ Mkt.RF + SMB + HML, data = merged)
broom::tidy(result)
View(ff)
View(ff)
rr = broom::tidy(result)
View(rr)
runApp()
runApp()
runApp()
symbols <- 'AAPL'
print(symbols)
getSymbols(symbols, src='yahoo')
prices = do.call(cbind, lapply(symbols, function(x) Cl(get(x)))) %>% setNames('Asset')
rets = Return.calculate(prices) %>% na.omit()
ffdata <- read.zoo("ff.csv", header = TRUE, sep = ',',  encoding="UTF-8")
ff <- as.xts(ffdata)
merged <- merge(rets, ff) %>% na.omit()
result = lm((Asset-RF) ~ Mkt.RF + SMB + HML, data = merged)
rr = broom::tidy(result)
View(rr)
runApp()
runApp()
symbols <- 'AAPL'
print(symbols)
getSymbols(symbols, src='yahoo')
prices = do.call(cbind, lapply(symbols, function(x) Cl(get(x)))) %>% setNames('Asset')
rets = Return.calculate(prices) %>% na.omit()
ffdata <- read.zoo("ff.csv", header = TRUE, sep = ',',  encoding="UTF-8")
ff <- as.xts(ffdata)
merged <- merge(rets, ff) %>% na.omit()
ffdata <- read.zoo("ff.csv", header = TRUE, sep = ',',  encoding="UTF-8")
ff <- as.xts(ffdata)
merged <- merge(rets, ff) %>% na.omit()
result = lm((Asset-RF) ~ Mkt.RF + SMB + HML, data = merged)
rr = broom::tidy(result)
View(rr)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('E:/project/shiny4/famafrench.R')
source('E:/project/shiny4/famafrench.R', echo=TRUE)
symbols <- 'AAPL'
getSymbols(symbols, src='yahoo')
prices = do.call(cbind, lapply(symbols, function(x) Cl(get(x)))) %>% setNames('Asset')
rets = Return.calculate(prices) %>% na.omit()
ffdata <- read.zoo("ff.csv", header = TRUE, sep = ',',  encoding="UTF-8")
ff <- as.xts(ffdata)
merged <- merge(rets, ff) %>% na.omit()
result = lm((Asset-RF) ~ Mkt.RF + SMB + HML, data = merged)
rr = broom::tidy(result)
plot(result)
(result)
rr_plot = plot(result)
symbols <- input$Ticker
print(symbols)
symbols <- 'AAPL'
getSymbols(symbols, src='yahoo')
prices = do.call(cbind, lapply(symbols, function(x) Cl(get(x)))) %>% setNames('Asset')
rets = Return.calculate(prices) %>% na.omit()
ffdata <- read.zoo("ff.csv", header = TRUE, sep = ',',  encoding="UTF-8")
ff <- as.xts(ffdata)
merged <- merge(rets, ff) %>% na.omit()
result = lm((Asset-RF) ~ Mkt.RF + SMB + HML, data = merged)
rr = broom::tidy(result)
rr_plot = plot(result)
symbols <- 'AAPL'
getSymbols(symbols, src='yahoo')
prices = do.call(cbind, lapply(symbols, function(x) Cl(get(x)))) %>% setNames('Asset')
rets = Return.calculate(prices) %>% na.omit()
ffdata <- read.zoo("ff.csv", header = TRUE, sep = ',',  encoding="UTF-8")
ff <- as.xts(ffdata)
merged <- merge(rets, ff) %>% na.omit()
result = lm((Asset-RF) ~ Mkt.RF + SMB + HML, data = merged)
rr = broom::tidy(result)
rr_plot = plot(result)
rr_plot = plot(result)
ff <- reactive({
symbols <- input$Ticker
print(symbols)
symbols <- 'AAPL'
getSymbols(symbols, src='yahoo')
prices = do.call(cbind, lapply(symbols, function(x) Cl(get(x)))) %>% setNames('Asset')
rets = Return.calculate(prices) %>% na.omit()
ffdata <- read.zoo("ff.csv", header = TRUE, sep = ',',  encoding="UTF-8")
ff <- as.xts(ffdata)
merged <- merge(rets, ff) %>% na.omit()
result = lm((Asset-RF) ~ Mkt.RF + SMB + HML, data = merged)
rr = broom::tidy(result)
plot(result, which = 1)
return(list(
ff_table = rr
))
})
output$ff_table = renderTable(
ff()$ff_table, digits =8
)
