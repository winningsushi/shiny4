#frontier
frontier <- reactive({

  rets <- filedata()
  Rf <- 0.01
  names = colnames(rets)
  # 
  # names(rets) = names #컬럼명을 심볼에서 이름으로 변경
  covs <- cov(rets) * 252 # 공분산 연율화
  yearly_mean = Return.annualized(rets, geometric = FALSE) %>% c()
  yearly_vol = StdDev.annualized(rets) %>% c()
  
  yearly_stat = cbind(yearly_mean, yearly_vol) %>%
    data.frame()
  
  yearly_stat = yearly_stat %>%
    ggplot(aes(x = yearly_vol, y = yearly_mean, label = names, color = names)) +
    geom_point(shape = 18) +
    scale_x_continuous(expand = c(0.02, 0.02)) + 
    scale_y_continuous(expand = c(0.02, 0.02)) +
    geom_text(size = 3, vjust = -0.7) +
    theme(legend.position = 'none') +
    xlab('Volatility') +
    ylab('Return')

  #tangency && minvol 
  numAssets = length(names)
  numPortfolio = 10000
  sim = list()
  for (i in 1 : numPortfolio) {
    
    wt = runif(numAssets, min=0, max=1)
    wt = wt / sum(wt)
    expected_return = wt %*% yearly_mean
    expected_vol = (t(wt) %*% covs %*% wt) %>% sqrt()
    expected_sharpe = (expected_return-Rf) / expected_vol
    risk_freerate = Rf
    sim[[i]] = c(wt, expected_return, expected_vol, expected_sharpe, risk_freerate)
    
  }
  
  sim = do.call(rbind, sim) %>% data.frame()
  colnames(sim) = c(names, 'Return', 'Volatility', 'Sharpe', 'Rf')
  
  target_minvol <- sim[which.min(sim$Volatility), ]
  target_maxsharpe <- sim[which.max(sim$Sharpe), ]

  p = sim %>%
    ggplot(aes(x = `Volatility`, y = `Return`, color = `Sharpe`)) +
    geom_point() +
    scale_color_gradient(low = 'Blue', high = 'Orange') +
    theme_classic()
  # 
  # # plot min vol and max sharpe
  p2 = p +
    geom_point(data = data.frame(target_minvol),
               aes(x = Volatility, y = Return),
               col = 'black', shape = 18, size = 3) +
    geom_point(data =  data.frame(target_maxsharpe),
               aes(x = Volatility, y = Return),
               col = 'black', shape = 18, size = 3) +
    annotate('text',
             x = target_minvol$Volatility + 0.03,
             y = target_minvol$Return,
             label='Min Vol',
             fontface=2) +
    annotate('text',
             x = target_maxsharpe$Volatility + 0.03,
             y = target_maxsharpe$Return,
             label='Max Sharpe',
             fontface=2)
  
  p3=p2 + 
    geom_abline(intercept = Rf,
                slope = target_maxsharpe$Sharpe,
                size = 1) +
    expand_limits(x=0) +
    expand_limits(y=0) 
  
    # geom_point(data = data.frame(yearly_stat),
    #            aes(x = yearly_vol, y = yearly_mean),
    #            color = 'black', shape = 4, size = 3)

  return(list(covs = covs,
              yearly_stat = yearly_stat,
              target_minvol = target_minvol,
              target_maxsharpe = target_maxsharpe,
              p3 = p3,
              p2 = p2
              ))

})

output$covs = renderDT(
  frontier()$covs
)
output$yearly_stat <- renderPlot(
  frontier()$yearly_stat
)
output$target_minvol = renderTable(
  frontier()$target_minvol
)
output$target_maxsharpe = renderTable(
  frontier()$target_maxsharpe
)
output$p3 = renderPlot(
  frontier()$p3
)

output$p2 = renderPlot(
  frontier()$p2
)

# 
# # Simulation
 
# 
# # plot simulation
# p = sim %>%
#   ggplot(aes(x = `Volatility`, y = `Return`, color = `Sharpe`)) +
#   geom_point() +
#   scale_color_gradient(low = 'Blue', high = 'Orange') +
#   theme_classic()
# ggplotly(p)
# 
# 
# # plot min vol and max sharpe
# p2 = p +
#   geom_point(data = target_minvol,
#              aes(x = Volatility, y = Return),
#              col = 'black', shape = 18, size = 3) +
#   geom_point(data = target_maxsharpe,
#              aes(x = Volatility, y = Return),
#              col = 'black', shape = 18, size = 3) +
#   annotate('text',
#            x = target_minvol$Volatility + 0.03,
#            y = target_minvol$Return,
#            label='Min Vol',
#            fontface=2) +
#   annotate('text',
#            x = target_maxsharpe$Volatility + 0.03,
#            y = target_maxsharpe$Return,
#            label='Max Sharpe',
#            fontface=2) +
#   geom_point(data = yearly_stat,
#              aes(x = yearly_vol, y = yearly_mean),
#              color = 'black', shape = 4, size = 3)
# ggplotly(p2)
# 
# 
# # plot CML
# 
# p3=p2 + 
#   geom_abline(intercept = Rf,
#               slope = target_maxsharpe$Sharpe,
#               size = 1) +
#   expand_limits(x=0) +
#   expand_limits(y=0) 
# 
# ggplotly(p3)
# target_minvol
# target_maxsharpe
# 
# #결과물 후처리 시작 
# collist <- colnames(target_minvol) %>% c()
# collist
# codelist <- c()
# for( x in collist){
#   code <- gsub('\\D','', x)
#   if ( code ==""){
#   }
#   else{
#     codelist = c(codelist, code)
#   }
# }
# codelist<- paste0("A", codelist)
# 
# etfname = c()
# benchlist = c()
# ipoday = c()
# for (k in codelist){
#   y =etfdb[etfdb$코드 == k,]
#   etfname = c(etfname, y$종목명)
#   benchlist = c(benchlist, y$기초지수)
#   ipoday = c(ipoday, y$상장일)
# }
# 
# newvec <- c("","","","")
# etfname <- c(etfname, newvec)
# benchlist <- c(benchlist, newvec)
# ipoday = c(ipoday, newvec)
# 
# target_minvol[2, ] <- etfname
# target_minvol[3, ] <- benchlist
# target_minvol[4, ] <- ipoday
# 
# target_maxsharpe[2, ] <- etfname
# target_maxsharpe[3, ] <- benchlist
# target_maxsharpe[4, ] <- ipoday
# 
# target_minvol

# return(period)
# })
